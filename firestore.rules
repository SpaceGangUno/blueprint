rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTeamMember() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'team_member';
    }

    function hasTeamAccess() {
      return isAdmin() || isTeamMember();
    }

    // Client rules
    match /clients/{clientId} {
      allow create: if isAuthenticated() && hasTeamAccess();
      allow read: if isAuthenticated() && hasTeamAccess();
      allow update, delete: if isAuthenticated() && hasTeamAccess();

      // Projects nested under clients
      match /projects/{projectId} {
        allow create: if isAuthenticated() && hasTeamAccess();
        allow read: if isAuthenticated() && hasTeamAccess();
        allow update, delete: if isAuthenticated() && hasTeamAccess();

        // Tasks nested under projects
        match /tasks/{taskId} {
          allow read: if isAuthenticated();
          allow write: if isAuthenticated() && hasTeamAccess();
        }
      }
    }

    // User profile rules
    match /users/{userId} {
      // Allow creation of first admin user or if user is creating their own document
      allow create: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
        request.auth.uid == userId && 
        request.resource.data.role == 'admin'
      );
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Team invite rules
    match /teamInvites/{inviteId} {
      allow create: if isAuthenticated() && isAdmin();
      allow read: if isAuthenticated() && (
        isAdmin() || 
        (request.auth.uid in get(/databases/$(database)/documents/teamInvites/$(inviteId)).data.userId)
      );
      allow update: if isAuthenticated() && (
        isAdmin() || 
        (request.auth.uid in get(/databases/$(database)/documents/teamInvites/$(inviteId)).data.userId)
      );
    }
  }
}
