rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Client rules
    match /clients/{clientId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Project rules - nested under clients
    match /projects/{projectId} {
      allow read: if isAuthenticated() && exists(/databases/$(database)/documents/clients/$(request.resource.data.clientId)) 
        && get(/databases/$(database)/documents/clients/$(request.resource.data.clientId)).data.userId == request.auth.uid;
      allow write: if isAuthenticated() && exists(/databases/$(database)/documents/clients/$(request.resource.data.clientId)) 
        && get(/databases/$(database)/documents/clients/$(request.resource.data.clientId)).data.userId == request.auth.uid;
    }

    // Task rules - nested under projects
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // User profile rules
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }

    // Team invite rules
    match /teamInvites/{inviteId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
  }
}
