rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isTeamMember() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'team_member';
    }

    function hasTeamAccess() {
      return isAdmin() || isTeamMember();
    }

    // Project permission helper functions
    function getUserProjectPermission(projectId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.projectPermissions[projectId].access;
    }

    function hasProjectReadAccess(projectId) {
      return isAdmin() || (
        isTeamMember() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)).data.projectPermissions[projectId] &&
        (getUserProjectPermission(projectId) in ['read', 'write', 'admin'])
      );
    }

    function hasProjectWriteAccess(projectId) {
      return isAdmin() || (
        isTeamMember() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)).data.projectPermissions[projectId] &&
        (getUserProjectPermission(projectId) in ['write', 'admin'])
      );
    }

    function hasProjectAdminAccess(projectId) {
      return isAdmin() || (
        isTeamMember() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)).data.projectPermissions[projectId] &&
        getUserProjectPermission(projectId) == 'admin'
      );
    }

    // Client rules
    match /clients/{clientId} {
      allow create: if hasTeamAccess();
      allow read: if hasTeamAccess();
      allow update, delete: if hasTeamAccess();

      // Projects nested under clients
      match /projects/{projectId} {
        allow create: if hasTeamAccess();
        allow read: if hasProjectReadAccess(projectId);
        allow update: if hasProjectWriteAccess(projectId);
        allow delete: if hasProjectAdminAccess(projectId);

        // Project tasks
        match /tasks/{taskId} {
          allow read: if hasProjectReadAccess(projectId);
          allow write: if hasProjectWriteAccess(projectId);
        }
      }
    }

    // Invoice rules
    match /invoices/{invoiceId} {
      // Admins can do everything
      allow read, write: if isAdmin();
      
      // Team members can only access their own invoices
      allow create: if isTeamMember() && 
        request.resource.data.userId == request.auth.uid;
      
      allow read: if isTeamMember() && (
        resource.data.userId == request.auth.uid ||
        resource.data.assignedTo == request.auth.uid
      );
      
      allow update: if isTeamMember() && (
        resource.data.userId == request.auth.uid ||
        resource.data.assignedTo == request.auth.uid
      ) && request.resource.data.userId == resource.data.userId;
      
      allow delete: if isTeamMember() && 
        resource.data.userId == request.auth.uid;
    }

    // User profile rules
    match /users/{userId} {
      allow create: if isAuthenticated() && (
        !exists(/databases/$(database)/documents/users/$(request.auth.uid)) || 
        request.auth.uid == userId
      );
      allow read: if isAuthenticated() && (isOwner(userId) || hasTeamAccess());
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Team invite rules
    match /teamInvites/{inviteId} {
      allow create: if isAdmin();
      allow read: if hasTeamAccess();
      allow update: if hasTeamAccess();
      allow delete: if isAdmin();
    }
  }
}
